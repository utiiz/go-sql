name: Create Release
on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type of version bump (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22.5
      - name: Run tests
        run: go test ./...

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: myapp-linux
          - os: windows-latest
            output_name: myapp-windows.exe
          - os: macos-latest
            output_name: myapp-macos
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22.5
      - name: Build
        run: go build -v -o ${{ matrix.output_name }} .
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output_name }}
          path: ${{ matrix.output_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          echo "latest_tag=$(git describe --tags --abbrev=0 || echo v0.0.0)" >> $GITHUB_OUTPUT
      - name: Bump version and push tag
        id: bump_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          IFS='.' read -ra VERSION <<< "${latest_tag#v}"
          MAJOR=${VERSION[0]}
          MINOR=${VERSION[1]}
          PATCH=${VERSION[2]}
          case "${{ github.event.inputs.version_bump }}" in
            major)
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR+1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH+1))
              ;;
          esac
          new_tag="v$MAJOR.$MINOR.$PATCH"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag $new_tag
          git push origin $new_tag
      - name: Generate release notes
        id: generate_release_notes
        run: |
          echo "Release Notes for ${{ steps.bump_version.outputs.new_tag }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log $(git describe --tags --always --abbrev=0 ${{ steps.get_latest_tag.outputs.latest_tag }}^)..HEAD --pretty=format:"- %s" >> RELEASE_NOTES.md
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: Release ${{ steps.bump_version.outputs.new_tag }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp-linux/myapp-linux
          asset_name: myapp-linux
          asset_content_type: application/octet-stream
      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp-windows.exe/myapp-windows.exe
          asset_name: myapp-windows.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Assets (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp-macos/myapp-macos
          asset_name: myapp-macos
          asset_content_type: application/octet-stream
